
class MeshInstance
{
    Mesh@ mesh;
}

class Bullet
{
    Vector3 pos;
    Vector3 dir;
}

class MeshTest
{
    Camera3D@ camera;
    array<MeshInstance> heli_body;
    array<MeshInstance> heli_main_rotor;
    array<MeshInstance> heli_tail_rotot;
    array<MeshInstance> heli_pad;

    array<Bullet> bullets;

    float camera_rotate_accel = 1.25f;
    float camera_rotate_deaccel = 0.85f;
    float camera_rotate_cur_speed = 0.0f;
    float camera_rotate_speed = 1.35f;
    float camera_rotate_angle = 0.0f;
    float camera_dist_vert = 50.0f;
    float camera_dist_horz = 40.0f;
    float camera_vert_angle = 0.785489805f;

    float start_cooldown = 0.0f;

    Vector3 heli_pos;
    float   heli_angle;
    Vector2 heli_speed;

    float bullet_cooldown = 0.0f;

    float heli_height = 10.0f;
    float heli_rotor_angle = 0.0f;

    float heli_rotate_accel = 12.5f;
    float heli_rotate_deaccel = 3.0f;
    float heli_rotate_speed = 2.25f;
    float heli_rotate_z_angle = 0.375f;

    float heli_forward_accel = 60.0f;
    float heli_forward_deaccel = 30.0f;
    float heli_forward_speed = 35.0f;
    float heli_forward_x_angle = 0.375f;

    float heli_backward_accel = 40.0f;
    float heli_backward_deaccel = 4.0f;
    float heli_backward_speed = 20.0f;
    float heli_backward_x_angle = 0.25f;

	int alias_move_vert = -1;
	int alias_move_horz = -1;
	int alias_fire = -1;

	void OnInit()
	{
		alias_move_vert = core.controls.GetAliasIndex("Hero.MOVE_VERT");
		alias_move_horz = core.controls.GetAliasIndex("Hero.MOVE_HORZ");
		alias_fire = core.controls.GetAliasIndex("Hero.Fire");

        Matrix pad_mat = heli_pad[0].mesh.GetTransform();
        heli_pos = pad_mat.GetPos();
        //heli_pos.y = heli_height;
	}

    void UpdateHeliControl(float dt)
    {
        heli_pos.y += dt * 8.0f;

        if (heli_pos.y > heli_height)
        {
            heli_pos.y = heli_height;
        }

        float dir_y = core.controls.GetValue(alias_move_horz, 0);
        float dir_x = core.controls.GetValue(alias_move_vert, 0);

        if (abs(dir_y) > 0.1f)
        {
            heli_speed.y += dir_y * heli_rotate_accel * dt;

            if (heli_speed.y > heli_rotate_speed)
            {
                heli_speed.y = heli_rotate_speed;
            }

            if (heli_speed.y < -heli_rotate_speed)
            {
                heli_speed.y = -heli_rotate_speed;
            }
        }
        else
        {
            if (heli_speed.y > 0.0f)
            {
                heli_speed.y -= heli_rotate_deaccel * dt;

                if (heli_speed.y < 0.0f)
                {
                    heli_speed.y = 0.0f;
                }
            }
            else
            if (heli_speed.y < 0.0f)
            {
                heli_speed.y += heli_rotate_deaccel * dt;

                if (heli_speed.y > 0.0f)
                {
                    heli_speed.y = 0.0f;
                }
            }
        }

        if (abs(dir_x) > 0.1f)
        {
            heli_speed.x += dir_x * (dir_x > 0.1f ? heli_forward_accel : heli_backward_accel) * dt;

            if (heli_speed.x > heli_forward_speed)
            {
                heli_speed.x = heli_forward_speed;
            }

            if (heli_speed.x < -heli_backward_speed)
            {
                heli_speed.x = -heli_backward_speed;
            }
        }
        else
        {
            if (heli_speed.x > 0.0f)
            {
                heli_speed.x -= heli_forward_deaccel * dt;

                if (heli_speed.x < 0.0f)
                {
                    heli_speed.x = 0.0f;
                }
            }
            else
            if (heli_speed.x < 0.0f)
            {
                heli_speed.x += heli_backward_accel * dt;

                if (heli_speed.x > 0.0f)
                {
                    heli_speed.x = 0.0f;
                }
            }
        }

        heli_angle -= heli_speed.y * dt;

        heli_pos += Vector3(sin(-heli_angle), 0, cos(-heli_angle)) * heli_speed.x * dt;

        if (bullet_cooldown > 0.0f)
        {
            bullet_cooldown -= dt;
        }
        else
        {
            if (core.controls.GetState(alias_fire, 0) > 0)
            {
                Bullet bullet;
                bullet.pos = heli_pos;
                bullet.dir = Vector3(sin(-heli_angle), sin(-camera_vert_angle), cos(-heli_angle));
                bullet.dir.Normalize();

                bullet_cooldown = 0.1f;

                bullets.insertLast(bullet);
            }
        }
    }

    void UpdateHeli(float dt)
    {
        heli_rotor_angle += dt * 15;

        if (start_cooldown < 1.0f)
        {
            start_cooldown += dt * 1.0f;
        }
        else
        {
            UpdateHeliControl(dt);
        }

        Matrix rotateZ;
        rotateZ.RotateZ(-heli_speed.y / heli_rotate_speed * heli_rotate_z_angle);

        Matrix rotateX;
        rotateZ.RotateX(heli_speed.x > 0.0f ? (heli_speed.x / heli_forward_speed * heli_forward_x_angle) : (heli_speed.x / heli_backward_speed * heli_backward_x_angle));

        Matrix heli_mat;
        heli_mat.RotateY(-heli_angle);
        heli_mat = rotateZ * rotateX * heli_mat;
        heli_mat.SetPos(heli_pos);

        heli_body[0].mesh.SetTransform(heli_mat);

        Matrix loc_matrix = heli_body[0].mesh.GetLocatorTransform("loc_main_rotor");
        Matrix main_rotor_rot;
        main_rotor_rot.RotateY(heli_rotor_angle);

        heli_main_rotor[0].mesh.SetTransform(main_rotor_rot * loc_matrix);

        loc_matrix = heli_body[0].mesh.GetLocatorTransform("loc_tail_rotor");
        Matrix tail_rotor_rot;
        tail_rotor_rot.RotateX(heli_rotor_angle);

        heli_tail_rotot[0].mesh.SetTransform(tail_rotor_rot * loc_matrix);
    }

    void UpdateBullets(float dt)
    {
        for (int i =  0; i < bullets.get_length(); i++)
        {
            Bullet@ bullet = @bullets[i];

            bullet.pos += bullet.dir * dt * 10.0f;

            core.render.DebugSphere(bullet.pos, Vector3(1.0f, 0.0f, 1.0f), 1.0f);
        }
    }

    void UpdateCamera(float dt)
    {
        float dir_y = core.controls.GetValue(alias_move_horz, 0);

        if (abs(dir_y) > 0.1f)
        {
            camera_rotate_cur_speed += abs(dir_y) * camera_rotate_accel * dt;

            if (camera_rotate_cur_speed > camera_rotate_speed)
            {
                camera_rotate_cur_speed = camera_rotate_speed;
            }
        }
        else
        {
            if (camera_rotate_cur_speed > 0.0f)
            {
                camera_rotate_cur_speed -= camera_rotate_deaccel * dt;

                if (camera_rotate_cur_speed < 0.0f)
                {
                    camera_rotate_cur_speed = 0.0f;
                }
            }
        }

        if (camera_rotate_angle > heli_angle)
        {
            camera_rotate_angle -= (0.5f + camera_rotate_cur_speed) * dt;

            if (camera_rotate_angle < heli_angle)
            {
                camera_rotate_angle = heli_angle;
            }
        }
        else
        {
            camera_rotate_angle += (0.5f + camera_rotate_cur_speed) * dt;

            if (camera_rotate_angle > heli_angle)
            {
                camera_rotate_angle = heli_angle;
            }
        }

        Vector2 offset = Vector2(sin(-camera_rotate_angle) * 25.0f, cos(-camera_rotate_angle) * 25.0f); 
        camera.SetPosTarget(Vector3(cos(camera_vert_angle) * camera_dist_horz + offset.x + heli_pos.x, camera_dist_vert, sin(camera_vert_angle) * camera_dist_horz + offset.y + heli_pos.z), Vector3(offset.x + heli_pos.x, 0.0f, offset.y + heli_pos.z));
    }

    void Update(float dt)
    {
        UpdateHeli(dt);

        UpdateCamera(dt);

        UpdateBullets(dt);
    }
}