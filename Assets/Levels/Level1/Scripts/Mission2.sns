class Mission2 : Mission
{
    //1
    EnemyPool@ centers;
    array<Marker> commandersSpawn;
    array<Soldier> commanders;

    //2
    EnemyPool@ powerPlants;

    //3
    EnemyPool@ barracks;
    Marker spySpawn;
    Soldier spy;

    //4
    EnemyPool@ houses;
    EnemyPool@ bombers;
    array<Marker> bombersSpawn;

    int cur_bomber = -1;
    Vector3 cur_bomber_dir;
    float cur_bomber_distance;

    void OnInit()
    {
        main.RegisterMission(this);

        for (int i = 0; i<main.enemy_pools.get_length();i++)
        {
            auto@ pool = main.enemy_pools[i];

            if (pool.enemy_name == "M2_CommandCenter")
            {
                @centers = @pool;
                continue;
            }

            if (pool.enemy_name == "M2_PowerPlant")
            {
                @powerPlants = @pool;
                continue;
            }

            if (pool.enemy_name == "M2_Barracks")
            {
                @barracks = @pool;
                continue;
            }

            if (pool.enemy_name == "M2_VillageHouse")
            {
                @houses = @pool;
                continue;
            }

            if (pool.enemy_name == "M2_Bombers")
            {
                @bombers = @pool;
                continue;
            }
        }

        commanders.resize(commandersSpawn.get_length());

        curObjective = 3;
    }

    bool IsCompleted()
    {
        return curObjective == 4;
    }

    void UpdateSoldier(float dt, Soldier@ soldier, int building_hp, Matrix spawnPoint)
    {
        if (!soldier.spawned)
        {
            if (building_hp <= 0)
            {
                soldier.spawned = true;
                soldier.visible = 1;
                soldier.phys.SetTransform(spawnPoint);
            }
            else
            {
                ShowMarker(spawnPoint.GetPos(), 0);
            }
        }

        auto mat = soldier.mesh.GetTransform();
        auto pos = mat.GetPos();

        if (soldier.spawned)
        {
            if (soldier.grab_state == 0)
            {
                if (soldier.time_to_move < 2.0f)
                {
                    soldier.time_to_move += dt;

                    pos.z -= dt * 12.0f;

                    mat.SetPos(pos);
                    soldier.phys.SetTransform(mat);
                }

                if (main.TryGrabSoldier(pos, dt))
                {
                    soldier.grab_state = 1;
                    main.StartGrabbing();
                }
            }
            else
            if (soldier.grab_state == 1)
            {
                if (!main.IsGrabbing())
                {
                    soldier.visible = 0;
                    soldier.grab_state = 2;
                }
                else
                {
                    pos = main.heli_pos;
                    pos.y -= main.ledge_pos;

                    mat.SetPos(pos);
                    soldier.phys.SetTransform(mat);
                }
            }
        }
    }

    void Update(float dt) override
    {
        if (curObjective == 0)
        {
            ShowObjective("M2: Destroy Command centers & capture commanders");

            int grabbed = 0;

            for (int i = 0; i < commanders.get_length(); i++)
            {
                auto@ commander = commanders[i];

                UpdateSoldier(dt, commander, centers.enemies[i].hp, commandersSpawn[i].transform);

                if (commander.grab_state == 2)
                {
                    grabbed++;
                }
            }

            if (grabbed == commanders.get_length())
            {
                curObjective++;
            }
        }
        else
        if (curObjective == 1)
        {
            ShowObjective("M2: Destroy power plant");

            if (CheckEnemies(houses) == 0)
            {
                curObjective++;
            }
        }
        else
        if (curObjective == 2)
        {
            ShowObjective("M2: Destroy barracks & retrive spy");

            UpdateSoldier(dt, spy, barracks.enemies[0].hp, spySpawn.transform);

            if (spy.grab_state == 2)
            {
                curObjective++;
            }
        }
        else
        if (curObjective == 3)
        {
            if (cur_bomber == -1 || bombers.enemies[cur_bomber].hp == 0)
            {
                cur_bomber++;

                if (cur_bomber == bombersSpawn.get_length())
                {
                    curObjective++;
                }
                else
                {
                    auto spawn_pos = bombersSpawn[cur_bomber].transform.GetPos();
                    bombers.SpawnEnemy(spawn_pos);

                    cur_bomber_dir = (houses.enemies[0].mesh.GetTransform().GetPos() - spawn_pos);

                    cur_bomber_distance = cur_bomber_dir.Length();
                    cur_bomber_dir /= cur_bomber_distance;
                }
            }
            else
            {
                float len = dt * 25.0f;

                Matrix mat = bombers.enemies[cur_bomber].mesh.GetTransform();
                auto pos = mat.GetPos();

                Matrix rotation;
                rotation.RotateY(-atan2(cur_bomber_dir.z, cur_bomber_dir.x) + 0.01745329f * 90.0f);

                pos += cur_bomber_dir * len;
                rotation.SetPos(pos);
                bombers.enemies[cur_bomber].phys.SetTransform(rotation);

                ShowMarker(pos, cur_bomber);
            }
        }
    }
}