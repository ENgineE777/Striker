class MD500 : EnemyPool
{
    array<Enemy> enemies_rotor;

    void OnInit() override 
    {
        main.RegisterEnemyPool(this);
        EnemyPool::OnInit();

        enemies_rotor.resize(enemies.get_length());

        for (int i = 0; i < enemies.get_length(); i++)
        {
            Matrix mat = enemies[i].mesh.GetLocatorTransform("loc_rotor");
            auto vz = mat.GetVz();
            enemies[i].aim_angle = atan2(vz.x, vz.z);
            enemies_rotor[i].mesh.SetTransform(mat);
        }
    }

    void SpawnEnemy(Vector3&in pos)
    {
        EnemyPool::SpawnEnemy(pos);

        int index = enemies.get_length() - 1;
        enemies_rotor.resize(index + 1);

        Matrix mat = enemies[index].mesh.GetLocatorTransform("loc_rotor");
        enemies_rotor[index].mesh.SetTransform(mat);
    }

    void HideEnemy(int object_index) override
    {
        enemies[object_index].visible = 0;
        enemies_rotor[object_index].visible = 0;
    }

    void Update(float dt) override
    {
        for (int i = 0; i < enemies.get_length(); i++)
        {
            auto@ enemy = enemies[i];

            if (enemy.hp <= 0)
            {
                continue;
            }

            Matrix mat = enemy.mesh.GetTransform();
            auto pos = mat.GetPos();

            auto dir = main.heli_pos - pos;
            dir.y = 0.0f;

            if (enemy.shoot_cooldown > 0.0001f)
            {
                enemy.shoot_cooldown -= dt;
            }

            float len = dir.Length();
            dir /= len;

            if (enemy.state == Idle)
            {
                if (len < 150.0f)
                {
                    enemy.state = Pursuit;
                } 
            }
            else
            if (enemy.state == Pursuit)
            {
                if (len < 30.0f)
                {
                    enemy.state = Strafing;
                }
                else
                {
                    pos += dir * dt * 25.0f;
                }
            }
            else
            if (enemy.state == Strafing)
            {
                if (len < 5.0f)
                {
                    pos -= dir * dt * 25.0f;
                }
                else
                if (len < 35.0f)
                {
                     enemy.state_time -= dt;

                    if (enemy.state_time < 0.0f)
                    {
                        enemy.state_time = 1.0f + rand() * 2.0f;
                        enemy.state_param = 1 - enemy.state_param;
                    }

                    pos += Vector3(-dir.z, 0.0f, dir.x) * dt * 15.0f * (enemy.state_param == 0 ? 1.0f : -1.0f);
                }
                else
                {
                    enemy.state = Idle;
                }
            }

            if (enemy.state == Pursuit || enemy.state == Strafing)
            {
                float target_angle = -atan2(dir.z, dir.x) + 0.01745329f * 90.0f;
                enemy.aim_angle = core.utils.AdvanceAngle(enemy.aim_angle, target_angle, 0.055f);

                Matrix rotation;
                rotation.RotateY(enemy.aim_angle);

                rotation.SetPos(pos);

                enemy.phys.SetTransform(rotation);

                if (enemy.state == Strafing && enemy.shoot_cooldown < 0.0005f && core.utils.IsSameAngles(enemy.aim_angle, target_angle))
                {
                    auto dir = (main.heli_pos - pos);
                    dir.Normalize();

                    Matrix loc_matrix = enemy.mesh.GetLocatorTransform(enemy.shoot_side == 0? "loc_left" : "loc_right");
                    enemy.shoot_side = 1 - enemy.shoot_side;

                    main.AddProjectile("Bullets", loc_matrix.GetPos(), dir, enemy_name, i);

                    enemy.shoot_cooldown = 1.0f;
                }
            }

            mat = enemy.mesh.GetLocatorTransform("loc_rotor");

            enemy.rotor_angle += dt * 15.0f;

            Matrix rotation;
            rotation.RotateY(enemy.rotor_angle);

            enemies_rotor[i].mesh.SetTransform(rotation * mat);
        }
    }
}