class AATank : EnemyPool
{
    array<Enemy> enemies_tower;

    void OnInit() override 
    {
        main.RegisterEnemyPool(this);
        EnemyPool::OnInit();

        enemies_tower.resize(enemies.get_length());

        for (int i = 0; i < enemies.get_length(); i++)
        {
            Matrix mat = enemies[i].mesh.GetLocatorTransform("loc_tower");
            auto vz = mat.GetVz();
            enemies[i].aim_angle = atan2(vz.x, vz.z);
            enemies_tower[i].mesh.SetTransform(mat);
        }
    }

    void SpawnEnemy(Vector3&in pos)
    {
        EnemyPool::SpawnEnemy(pos);

        int index = enemies.get_length() - 1;
        enemies_tower.resize(index + 1);

        Matrix mat = enemies[index].mesh.GetLocatorTransform("loc_tower");
        enemies_tower[index].mesh.SetTransform(mat);
    }

    void HideEnemy(int object_index) override
    {
        enemies[object_index].visible = 0;
        enemies_tower[object_index].visible = 0;
    }

    void Update(float dt) override
    {
        for (int i = 0; i < enemies.get_length(); i++)
        {
            auto@ enemy = enemies[i];

            if (enemy.hp <= 0)
            {
                continue;
            }

            Matrix mat = enemy.mesh.GetLocatorTransform("loc_tower");

            if (enemy.shoot_cooldown > 0.0001f)
            {
                enemy.shoot_cooldown -= dt;
            }

            auto dir = main.heli_pos - mat.GetPos();
            dir.y = 0.0f;

            if (dir.Length() < 40.0f)
            {
                float target_angle = atan2(dir.x, dir.z);
                enemy.aim_angle = core.utils.AdvanceAngle(enemy.aim_angle, target_angle, 0.055f);

                Matrix rotation;
                rotation.RotateY(enemy.aim_angle);
                rotation.SetPos(mat.GetPos());

                enemies_tower[i].mesh.SetTransform(rotation);

                if (enemy.shoot_cooldown < 0.0005f && core.utils.IsSameAngles(enemy.aim_angle, target_angle))
                {
                    auto dir = (main.heli_pos - mat.GetPos());
                    dir.Normalize();

                    Matrix loc_matrix = enemies_tower[i].mesh.GetLocatorTransform(enemy.shoot_side == 0? "loc_left" : "loc_right");
                    enemy.shoot_side = 1 - enemy.shoot_side;

                    main.AddProjectile("Bullets", loc_matrix.GetPos(), dir, enemy_name, i);

                    enemy.shoot_cooldown = 1.0f;
                }
            }
        }
    }
}