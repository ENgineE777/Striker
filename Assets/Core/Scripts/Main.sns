class Particle
{
    Vector3 pos;
    Vector3 color;
    float radius = 0.0f;
    float timelife = 0.0f;
}

class Main
{
    Camera3D@ camera;

    MeshInstance heli_body;
    MeshInstance heli_main_rotor;
    MeshInstance heli_tail_rotot;
    MeshInstance heli_frac;

    MeshInstance heli_pad;
    MeshInstance copilot;

    int cur_mission = 0;
    array<Mission@> missions;

    array<EnemyPool@> enemy_pools;
    array<ProjectilePool@> projectile_pools;

    array<Particle> particles;

    float camera_rotate_angle = 0.0f;
    float camera_dist_vert = 50.0f;
    float camera_dist_horz = 40.0f;
    float camera_vert_angle = -0.785489805f;

    float start_cooldown = 0.0f;

    Vector3 heli_pos;
    float   heli_angle;
    Vector3 heli_speed;
    Vector2 heli_quick_strafe;

    float bullet_cooldown = 0.0f;
    float bullet_vert_angle = 0.01745329f * 17.5f;

    float missile_cooldown = 0.0f;
    int   missile_side = 0;

    float heli_height = 10.0f;
    float heli_rotor_angle = 0.0f;

    float heli_rotate_accel = 12.5f;
    float heli_rotate_deaccel = 5.0f;
    float heli_rotate_speed = 2.25f;
    float heli_rotate_z_angle = 0.375f;

    float heli_strafe_accel = 12.5f;
    float heli_strafe_deaccel = 5.0f;
    float heli_strafe_speed = 2.25f;
    float heli_strafe_z_angle = 0.375f;

    bool heli_classic_camera = true;

    float heli_quick_strafe_speed = 40.0f;
    float heli_quick_strafe_deaccel = 70.0f;

    float heli_forward_accel = 65.0f;
    float heli_forward_deaccel = 40.0f;
    float heli_forward_speed = 45.0f;
    float heli_forward_x_angle = 0.375f;

    float heli_backward_accel = 40.0f;
    float heli_backward_deaccel = 10.0f;
    float heli_backward_speed = 25.0f;
    float heli_backward_x_angle = 0.25f;

	int alias_move_vert = -1;
	int alias_rotate = -1;
    int alias_cursor_x = -1;
	int alias_cursor_y = -1;
    int alias_strafe = -1;
    int alias_quick_strafe = -1;
    int alias_camera_toggle = -1;
    int alias_lock_toggle = -1;
	int alias_fire = -1;
    int alias_missile_fire = -1;
    int alias_prev_mission = -1;
    int alias_next_mission = -1;

    UIView@ ui_reticle;

    Vector3 main_helipad_pos;

    bool landing = false;
    bool close_to_landing = false;
    Vector3 helipad_pos;
    float time_near_landing;
    Vector3 dir_to_helipad;
    float dist_to_helipad;

    int target_enemy_pool = -1;
    int target_enemy_index = - 1;
    bool target_enemy_locked = false;

    int copilot_path_point = -1;
    float copilot_path_segment_len = 0.0f;
    Vector3 copilot_path_segemnt_dir = 0.0f;

    float ledge_pos = 0.0f;
    bool can_grab = true;
    bool grabbing = false;

    float timer = 0.0f;
    float fix_dir = 1.0f;
    float rotor_fx_cooldown = 0.0f;

    UILabel@ objective_label;
    UILabel@ armour_count_label;
    UILabel@ fuel_count_label;
    UILabel@ bullets_count_label;
    UILabel@ missiles_count_label;

    int armour_count = 100;
    int fuel_count = 100;
    int bullets_count = 100;
    int missiles_count = 100;

    float time_to_restart = 0.0f;

    void CopilotNextSegment(array<Marker>@ path, int index)
    {
        copilot_path_point = index;

        copilot_path_segemnt_dir = (path[index].transform.GetPos() - copilot.mesh.GetTransform().GetPos());

        copilot_path_segment_len = copilot_path_segemnt_dir.Length();
        copilot_path_segemnt_dir /= copilot_path_segment_len;
    }

    bool MoveCopilot(float dt, array<Marker>@ path, bool forward)
    {
        float len = dt * 12.0f;

        auto mat = copilot.mesh.GetTransform();
        auto pos = mat.GetPos();
        pos += copilot_path_segemnt_dir * len;
        mat.SetPos(pos);
        copilot.mesh.SetTransform(mat);

        copilot_path_segment_len -= len;

        if (copilot_path_segment_len < 0.0f)
        {
            if (forward)
            {
                copilot_path_point++;

                if (copilot_path_point < path.get_length())
                {
                    CopilotNextSegment(path, copilot_path_point);
                }
                else
                {
                    return true;
                }
            }
            else
            {
                copilot_path_point--;

                if (copilot_path_point >= 0)
                {
                    CopilotNextSegment(path, copilot_path_point);
                }
                else
                {
                    return true;
                }
            }
        }

        return false;
    }

	void OnInit()
	{
		alias_move_vert = core.controls.GetAliasIndex("Hero.MoveVert");
		alias_rotate = core.controls.GetAliasIndex("Hero.Rotate");
        alias_cursor_x = core.controls.GetAliasIndex("Hero.CursorX");
		alias_cursor_y = core.controls.GetAliasIndex("Hero.CursorY");
        alias_strafe = core.controls.GetAliasIndex("Hero.Strafe");
        alias_quick_strafe = core.controls.GetAliasIndex("Hero.QuickStrafe");
        alias_camera_toggle = core.controls.GetAliasIndex("Hero.CameraToggle");
        alias_lock_toggle = core.controls.GetAliasIndex("Hero.LockToggle");
		alias_fire = core.controls.GetAliasIndex("Hero.Fire");
        alias_missile_fire = core.controls.GetAliasIndex("Hero.MissileFire");
        alias_prev_mission = core.controls.GetAliasIndex("Hero.PrevMission");
        alias_next_mission = core.controls.GetAliasIndex("Hero.NextMission");

        Restart();
	}

    void Restart()
    {
        cur_mission = 0;
        for (int i = 0; i < missions.get_length(); i++)
        {
            missions[i].Restart();
        }

        for (int i = 0; i < enemy_pools.get_length(); i++)
        {
            enemy_pools[i].Restart();
        }

        for (int i = 0; i < projectile_pools.get_length(); i++)
        {
            projectile_pools[i].Restart();
        }

        particles.resize(0);

        camera_rotate_angle = 0.0f;
        start_cooldown = 0.0f;

        heli_angle = 0.0f;
        heli_speed = 0.0f;
        heli_quick_strafe = 0;

        bullet_cooldown = 0.0f;

        missile_cooldown = 0.0f;
        missile_side = 0;

        close_to_landing = false;
        helipad_pos = 0.0f;
        time_near_landing = 0.0f;
        dir_to_helipad = 0.0f;
        dist_to_helipad = 0.0f;

        if (target_enemy_pool != -1)
        {
            enemy_pools[target_enemy_pool].enemies[target_enemy_index].mesh.SetColor(Vector3(1.0f));
        }

        target_enemy_pool = -1;
        target_enemy_index = - 1;
        target_enemy_locked = false;

        copilot_path_point = -1;
        copilot_path_segment_len = 0.0f;
        copilot_path_segemnt_dir = 0.0f;

        ledge_pos = 0.0f;
        can_grab = true;
        grabbing = false;

        timer = 0.0f;
        fix_dir = 1.0f;
        rotor_fx_cooldown = 0.0f;

        armour_count = 100;
        fuel_count = 100;
        bullets_count = 500;
        missiles_count = 50;

        Matrix pad_mat = heli_pad.mesh.GetTransform();
        main_helipad_pos = pad_mat.GetPos();

        heli_pos = main_helipad_pos;
        heli_body.mesh.SetTransform(pad_mat);

        heli_body.visible = 1;
        heli_main_rotor.visible = 1;
        heli_tail_rotot.visible = 1;

        heli_frac.visible = 0;
        copilot.visible = 0;

        landing = true;
    }

    void RegisterProjectilePool(ProjectilePool@ pool)
    {
        projectile_pools.insertLast(pool);
    }

    void RegisterEnemyPool(EnemyPool@ pool)
    {
        enemy_pools.insertLast(pool);
    }

    void RegisterMission(Mission@ pool)
    {
        missions.insertLast(pool);
    }

    void AddProjectile(string&in name, Vector3&in pos, Vector3&in dir, string&in shoter_name, int shoter_index)
    {
        for (int i =  0; i < projectile_pools.get_length(); i++)
        {
            auto@ pool = projectile_pools[i];

            if (pool.name == name)
            {
                pool.AddProjectile(pos, dir, shoter_name, shoter_index);
            }
        }
    }

    void AddParticle(Vector3 pos, Vector3 color, float radius)
    {
        int index = particles.get_length();
        particles.resize(index + 1);
        Particle@ particle = particles[index];

        particle.pos = pos;
        particle.color = color;
        particle.radius = radius;
    }

    void UpdateParticles(float dt)
    {
        for (int i =  0; i < particles.get_length(); i++)
        {
            Particle@ particle = @particles[i];

            particle.timelife += dt;

            if (particle.timelife > 0.35f)
            {
                particles.removeAt(i);
				i--;
            }
            else
            {
                core.render.DebugSphere(particle.pos, particle.color, particle.radius * particle.timelife / 0.35f);
            }
        }
    }

    void UpdateAutoTargeting()
    {
        if (target_enemy_locked && !landing)
        {
            return;
        }

        int new_target_enemy_pool = -1;
        int new_target_enemy_index = - 1;
        float dist = 10000;

        if (!landing)
        {
            for (int i = 0; i < enemy_pools.get_length(); i++)
            {
                auto@ pool = enemy_pools[i];

                if (!pool.AutoTargedAllowed())
                {
                    continue;
                }

                for (int j = 0; j < pool.enemies.get_length(); j++)
                {
                    auto@ enemy = pool.enemies[j];

                    if (enemy.hp <= 0)
                    {
                        continue;
                    }

                    auto pos = enemy.mesh.GetTransform().GetPos();
                    pos.y = heli_pos.y;

                    float cur_dir = (heli_pos - pos).Length();

                    if (cur_dir > 10.0f && cur_dir < 50.0f && cur_dir < dist &&
                        core.utils.IsPointInSector(Vector2(pos.x, pos.z), Vector2(heli_pos.x, heli_pos.z), heli_angle + 0.01745329f * 90.0f, 50.0f, 0.01745329f * 30.0f, false))
                    {
                        dist = cur_dir;
                        new_target_enemy_pool = i;
                        new_target_enemy_index = j;
                    }
                }
            }
        }

        if (new_target_enemy_pool != target_enemy_pool || new_target_enemy_index != target_enemy_index)
        {
            if (target_enemy_pool != -1)
            {
                enemy_pools[target_enemy_pool].enemies[target_enemy_index].mesh.SetColor(Vector3(1.0f));
            }

            if (new_target_enemy_pool != -1)
            {
                enemy_pools[new_target_enemy_pool].enemies[new_target_enemy_index].mesh.SetColor(Vector3(1.0f, 0.2f, 0.2f));
            }

            target_enemy_pool = new_target_enemy_pool;
            target_enemy_index = new_target_enemy_index;
        }
    }

    void UpdateHeliControl(float dt)
    {
        Vector3 delta_move = 0.0f;

        if (heli_pos.y < heli_height)
        {
            delta_move.y += dt * 8.0f; 
        }

        Vector3 target_pos;

        if (target_enemy_pool != -1 && enemy_pools[target_enemy_pool].enemies[target_enemy_index].hp > 0)
        {
            target_pos = enemy_pools[target_enemy_pool].enemies[target_enemy_index].mesh.GetTransform().GetPos();
        }
        else
        {
            target_enemy_pool = -1;
            target_enemy_locked = false;
        }

        if (!landing && target_enemy_pool != -1 && core.controls.GetState(alias_lock_toggle, 1) > 0)
        {
            target_enemy_locked = !target_enemy_locked;

            if (!target_enemy_locked)
            {
                enemy_pools[target_enemy_pool].enemies[target_enemy_index].mesh.SetColor(Vector3(1.0f, 1.0f, 1.0f));
            }
            else
            {
                enemy_pools[target_enemy_pool].enemies[target_enemy_index].mesh.SetColor(Vector3(0.2f, 1.0f, 1.0f));
            }
        }

        if (core.controls.GetState(alias_camera_toggle, 1) > 0)
        {
            heli_classic_camera = !heli_classic_camera;
        }

        float strafe = core.controls.GetValue(alias_strafe, 0);

        if (abs(strafe) > 0.1f)
        {
            heli_speed.z += strafe * heli_strafe_accel * dt;

            if (heli_speed.z > heli_strafe_speed)
            {
                heli_speed.z = heli_strafe_speed;
            }

            if (heli_speed.z < -heli_strafe_speed)
            {
                heli_speed.z = -heli_strafe_speed;
            }
        }
        else
        {
            if (heli_speed.z > 0.0f)
            {
                heli_speed.z -= heli_strafe_deaccel * dt;

                if (heli_speed.z < 0.0f)
                {
                    heli_speed.z = 0.0f;
                }
            }
            else
            if (heli_speed.z < 0.0f)
            {
                heli_speed.z += heli_strafe_deaccel * dt;

                if (heli_speed.z > 0.0f)
                {
                    heli_speed.z = 0.0f;
                }
            }
        }

        float strafe_quick = core.controls.GetValue(alias_quick_strafe, 0);

        if (abs(strafe_quick) > 0.1f && heli_quick_strafe.x < 0.0001f)
        {
            heli_quick_strafe.x = 40.0f;
            heli_quick_strafe.y = strafe_quick > 0.1f ? 1.0f : -1.0f;
        }

        float dir_y = 0.0f;

        if (core.controls.IsGamepadConnected())
        {
            dir_y = core.controls.GetValue(alias_rotate, 0);

            if (abs(dir_y) > 0.1f)
            {
                heli_speed.y += dir_y * heli_rotate_accel * dt;

                if (heli_speed.y > heli_rotate_speed)
                {
                    heli_speed.y = heli_rotate_speed;
                }

                if (heli_speed.y < -heli_rotate_speed)
                {
                    heli_speed.y = -heli_rotate_speed;
                }
            }
            else
            {
                if (heli_speed.y > 0.0f)
                {
                    heli_speed.y -= heli_rotate_deaccel * dt;

                    if (heli_speed.y < 0.0f)
                    {
                        heli_speed.y = 0.0f;
                    }
                }
                else
                if (heli_speed.y < 0.0f)
                {
                    heli_speed.y += heli_rotate_deaccel * dt;

                    if (heli_speed.y > 0.0f)
                    {
                        heli_speed.y = 0.0f;
                    }
                }
            }
        }
        else
        {
            Vector2 cursor = Vector2(core.controls.GetValue(alias_cursor_x, 0), core.controls.GetValue(alias_cursor_y, 0));

            float scale = 1024.0f / core.render.GetHeight();

            ui_reticle.x = cursor.x * scale;
            ui_reticle.y = cursor.y * scale;

            Vector3 ray_origin;
            Vector3 ray_dir;
            core.render.GetRayFromScreen(cursor, ray_origin, ray_dir);

            Vector3 hit, normal;
            string object_name;
            int object_index;

            if (core.scene.Raycast3D(ray_origin, ray_dir, 500.0f, 1, hit, normal, object_name, object_index))
            {
                hit.y = heli_pos.y;
                hit -= heli_pos;

                float target = atan2(hit.z, hit.x) - 0.01745329f * 90.0f;
                float diff = core.utils.GetAnglesDifference(heli_angle, target);
                float speed = (clamp(abs(diff), 0.01745329f * 5.0f, 0.01745329f * 50.0f) - 0.01745329f * 5.0f) / (0.01745329f * 45.0f);

                heli_angle = core.utils.AdvanceAngle(heli_angle, target, speed * 0.0275f);
            }
        }

        float dir_x = core.controls.GetValue(alias_move_vert, 0);

        if (abs(dir_x) > 0.1f)
        {
            heli_speed.x += dir_x * (dir_x > 0.1f ? heli_forward_accel : heli_backward_accel) * dt;

            if (heli_speed.x > heli_forward_speed)
            {
                heli_speed.x = heli_forward_speed;
            }

            if (heli_speed.x < -heli_backward_speed)
            {
                heli_speed.x = -heli_backward_speed;
            }
        }
        else
        {
            if (heli_speed.x > 0.0f)
            {
                heli_speed.x -= heli_forward_deaccel * dt;

                if (heli_speed.x < 0.0f)
                {
                    heli_speed.x = 0.0f;
                }
            }
            else
            if (heli_speed.x < 0.0f)
            {
                heli_speed.x += heli_backward_accel * dt;

                if (heli_speed.x > 0.0f)
                {
                    heli_speed.x = 0.0f;
                }
            }
        }

        if (target_enemy_locked)
        {
            auto dir = target_pos - heli_pos;

            float target_angle = atan2(dir.z, dir.x) - 0.01745329f * 90.0f;
            heli_angle = core.utils.AdvanceAngle(heli_angle, target_angle, 0.055f);
        }

        heli_angle -= heli_speed.y * dt;

        delta_move += Vector3(sin(-heli_angle), 0, cos(-heli_angle)) * heli_speed.x * dt;
        delta_move -= Vector3(sin(-heli_angle), 0, cos(-heli_angle)) * 0.001f * fix_dir;
        fix_dir = -fix_dir;

        delta_move += Vector3(cos(-heli_angle), 0, -sin(-heli_angle)) * dt * heli_speed.z * 10.0f;

        if (heli_quick_strafe.x > 0.001f)
        {
            heli_quick_strafe.x -= heli_quick_strafe_deaccel * dt;

            if (heli_quick_strafe.x < 0.0f)
            {
                heli_quick_strafe.x = 0.0f;
            }

            delta_move += Vector3(cos(-heli_angle), 0, -sin(-heli_angle)) * dt * heli_quick_strafe.x * heli_quick_strafe.y;
        }

        heli_body.phys.Move(delta_move, 1, 0);

        if (bullet_cooldown > 0.0f)
        {
            bullet_cooldown -= dt;
        }
        else
        {
            if (core.controls.GetState(alias_fire, 0) > 0 && bullets_count > 0)
            {
                Matrix loc_matrix = heli_body.mesh.GetLocatorTransform("loc_gun_muzzle");
                Vector3 pos = loc_matrix.GetPos();

                Matrix bullet_mat;
                bullet_mat.RotateX(bullet_vert_angle);
                bullet_mat.RotateY(-heli_angle);
                bullet_mat.SetPos(pos);

                Vector3 dir;

                if (target_enemy_pool != -1)
                {
                    dir = target_pos - pos;
                    dir.Normalize();
                }
                else
                {
                    dir = bullet_mat.GetVz();
                }

                AddProjectile("Bullets", pos, dir, "HeliBody", 0);

                bullet_cooldown = 0.25f;

                bullets_count--;
            }
        }

        if (missile_cooldown > 0.0f)
        {
            missile_cooldown -= dt;
        }
        else
        {
            if (core.controls.GetState(alias_missile_fire, 0) > 0 && missiles_count > 0)
            {
                Matrix loc_matrix = heli_body.mesh.GetLocatorTransform(missile_side == 1 ? "loc_missile_left" : "loc_missile_right");
                Vector3 pos = loc_matrix.GetPos();

                Matrix missile_mat;
                missile_mat.RotateX(bullet_vert_angle);
                missile_mat.RotateY(-heli_angle);
                missile_mat.SetPos(pos);

                Vector3 dir;

                if (target_enemy_pool != -1)
                {
                    dir = target_pos - pos;
                    dir.Normalize();
                }
                else
                {
                    dir = missile_mat.GetVz();
                }

                 AddProjectile("Missiles", pos, dir, "HeliBody", 0);

                missile_cooldown = 0.5f;

                missile_side = 1 - missile_side;

                missiles_count--;
            }
        }
    }

    bool CheckIfLanded(Vector3 pos)
    {
        auto dir = pos - heli_pos;

        return dir.Length() < 0.1f;
    }

    void CheckIfCanLand(Vector3 pos, float dt)
    {
        if (landing)
        {
            return;
        }

        Vector3 dir = heli_pos - pos;
        dir.y = 0.0f;

        if (dir.Length() < 4.0f)
        {
            core.render.DebugText(5, 2, "Landing");

            time_near_landing += dt;
            close_to_landing = true;

            if (time_near_landing > 2.0f)
            {
                landing = true;
                helipad_pos = pos;

                dir_to_helipad = helipad_pos - heli_pos;
                dist_to_helipad = dir_to_helipad.Length();
                dir_to_helipad /= dist_to_helipad;
            }
        }
        else
        if (!close_to_landing)
        {
            time_near_landing = 0.0f;
        }
    }

    void TakeOff()
    {
        landing = false;
    }

    bool TryGrabSoldier(Vector3 pos, float dt)
    {
        if (landing || !can_grab)
        {
            return false;
        }

        Vector3 dir = heli_pos - pos;
        dir.y = 0.0f;
        float len = dir.Length();
        bool lowered = false;

        if (len < 4.0f)
        {
            can_grab = false;

            core.render.DebugText(5, 2, "Grabbing");

            ledge_pos += dt * 6.0f;

            if (ledge_pos > heli_pos.y - pos.y)
            {
                ledge_pos = heli_pos.y - pos.y;
                lowered = true;
            }
        }
        else
        {
            ledge_pos -= dt * 6.0f;

            if (ledge_pos < 0.0f)
            {
                ledge_pos = 0.0f;
            }
        }

        if (ledge_pos > 0.01f)
        {
            ShowLadder();
        }

        if (len < 2.0f && lowered)
        {
            return true;
        }

        return false;
    }

    void ShowLadder()
    {
        auto pos = heli_pos;
        pos.y -= ledge_pos;

        Vector3 res;
        core.render.TransformToScreen(pos, res, Vector2(35.0f), Vector2(45.0f));
        float scale = core.render.GetHeight() / 1024.0f;

        core.render.DebugText(Vector2(res.x * scale, res.y * scale), 0, "V");
    }
    void StartGrabbing()
    {
        if (!grabbing)
        {
            grabbing = true;
        }
    }

    bool IsGrabbing()
    {
        return grabbing;
    }

    void UpdateLadder(float dt)
    {
        if (grabbing)
        {
            ledge_pos -= dt * 6.0f;

            if (ledge_pos < 0.0f)
            {
                ledge_pos = 0.0f;
                grabbing = false;
            }

            ShowLadder();
        }
    }

    void UpdateHeli(float dt)
    {
        if (armour_count == 0)
        {
            return;
        }

        heli_rotor_angle += dt * 15.0f;

        UpdateAutoTargeting();

        UpdateLadder(dt);

        bool force_set = false;

        if (start_cooldown < 1.0f)
        {
            start_cooldown += dt * 1.0f;
            landing = false;
        }
        else
        if (landing)
        {
            force_set = true;

            heli_angle = core.utils.AdvanceAngle(heli_angle, 0.0f, 0.075f);

            heli_pos.y -= dt * 5.0f;

            if (heli_pos.y < helipad_pos.y)
            {
                heli_pos.y = helipad_pos.y;
                camera_rotate_angle = heli_angle;
            }

            if (dist_to_helipad > 0.001f)
            {
                dist_to_helipad -= dt * 15.0f;

                if (dist_to_helipad < 0.0f)
                {
                    helipad_pos = heli_pos;
                }
                else
                {
                    heli_pos += dir_to_helipad * dt * 15.0f;
                }
            }
        }
        else
        {
            UpdateHeliControl(dt);
        }

        close_to_landing = false;

        if (core.controls.GetState(alias_next_mission, 1) > 0)
        {
            NextMission();
        }
        else
        if (core.controls.GetState(alias_prev_mission, 1) > 0)
        {
            NextMission(false);
        }

        Matrix rotateZ;
        rotateZ.RotateZ(-heli_speed.y / heli_rotate_speed * heli_rotate_z_angle - heli_speed.z / heli_strafe_speed * heli_strafe_z_angle);

        Matrix rotateX;
        rotateZ.RotateX(heli_speed.x > 0.0f ? (heli_speed.x / heli_forward_speed * heli_forward_x_angle) : (heli_speed.x / heli_backward_speed * heli_backward_x_angle));

        Matrix heli_mat;
        //heli_mat.RotateY(-heli_angle);
        //heli_mat = rotateZ * rotateX * heli_mat;

        if (force_set)
        {
            heli_mat.SetPos(heli_pos);
            heli_body.phys.SetTransform(heli_mat);
        }
        else
        {
            auto mat = heli_body.mesh.GetTransform();
            heli_pos = mat.GetPos();
            heli_mat.SetPos(heli_pos);
            heli_body.mesh.SetTransform(heli_mat);
        }

        Matrix loc_matrix = heli_body.mesh.GetLocatorTransform("loc_main_rotor");
        Matrix main_rotor_rot;
        main_rotor_rot.RotateY(heli_rotor_angle);
        main_rotor_rot = main_rotor_rot * loc_matrix;

        if (rotor_fx_cooldown > 0.0f)
        {
            rotor_fx_cooldown -= dt;
        }
        else
        {
            float rotor_angle = -0.01745329f * 15.0f;

            for (int i = 0; i < 5; i++)
            {
                Vector3 res;

                Vector3 dir = Vector3(cos(rotor_angle), 0.0f, sin(rotor_angle)) * main_rotor_rot - main_rotor_rot.GetPos();

                Vector3 hit, normal;
                string object_name;
                int object_index;

                if (core.scene.Raycast3D(main_rotor_rot.GetPos(), dir, 6.35f, 1, hit, normal, object_name, object_index))
                {
                    core.scene.PlayParticles("Core", "hit1", hit);
                    rotor_fx_cooldown = 0.075f;
                }

                rotor_angle += 0.01745329f * 72.0f;
            }
        }

        heli_main_rotor.mesh.SetTransform(main_rotor_rot);

        loc_matrix = heli_body.mesh.GetLocatorTransform("loc_tail_rotor");
        Matrix tail_rotor_rot;
        tail_rotor_rot.RotateX(heli_rotor_angle);

        heli_tail_rotot.mesh.SetTransform(tail_rotor_rot * loc_matrix);
    }

    void KillHeli()
    {
        armour_count = 0;

        heli_body.visible = 0;
        heli_main_rotor.visible = 0;
        heli_tail_rotot.visible = 0;

        heli_frac.phys.SetTransform(heli_body.mesh.GetTransform());
        heli_frac.visible = 1;
        heli_frac.phys.AddExplosionForce(heli_pos, 12.0f, 5.0f);
    }

    void HitObject(Vector3&in hit, int damage, string&in object_name, int object_index)
    {
        if (object_name == "HeliBody")
        {
            armour_count -= damage;

            if (armour_count <= 0)
            {
                KillHeli();
            }

            return;
        }

        for (int i = 0; i<enemy_pools.get_length();i++)
        {
            if (enemy_pools[i].CheckHit(hit, damage, object_name, object_index))
            {
                break;
            }
        }
    }

    void UpdateCamera(float dt)
    {
        float target = heli_angle;
        float diff = core.utils.GetAnglesDifference(camera_rotate_angle, target);
        float speed = (clamp(abs(diff), 0.01745329f * 10.0f, 0.01745329f * 50.0f) - 0.01745329f * 10.0f) / (0.01745329f * 40.0f);

        camera_rotate_angle = core.utils.AdvanceAngle(camera_rotate_angle, target, speed * 0.0375f);
        camera_rotate_angle = heli_angle;

        if (heli_classic_camera)
        {
            Vector2 offset = Vector2(sin(-camera_rotate_angle) * 25.0f, cos(-camera_rotate_angle) * 25.0f) * (heli_pos.y / heli_height);
            camera.SetPosTarget(Vector3(cos(camera_vert_angle) * camera_dist_horz + offset.x + heli_pos.x, camera_dist_vert, sin(camera_vert_angle) * camera_dist_horz + offset.y + heli_pos.z), Vector3(offset.x + heli_pos.x, 0.0f, offset.y + heli_pos.z));
        }
        else
        {
            Vector2 offset = Vector2(sin(-camera_rotate_angle), cos(-camera_rotate_angle));
            camera.SetPosTarget(Vector3(heli_pos.x - offset.x * 25.0f, heli_pos.y + camera_dist_vert, heli_pos.z - offset.y * 25.0f), Vector3(heli_pos.x + offset.x * 25.01f, 0.0f, heli_pos.z + offset.y * 25.01f));
        }
    }

    void NextMission(bool forward = true)
    {
        int count = missions.get_length();

        do
        {
            if (forward)
            {
                cur_mission++;

                if (cur_mission == missions.get_length())
                {
                    cur_mission = 0;
                }
            }
            else
            {
                cur_mission--;

                if (cur_mission < 0)
                {
                    cur_mission =  missions.get_length() - 1;
                }
            }

            count--;
        }
        while (count > 0 && missions[cur_mission].IsCompleted());
    }

    void UpdateEnemies(float dt)
    {
        for (int i = 0; i < enemy_pools.get_length(); i++)
        {
            enemy_pools[i].Update(dt);
        }
    }

    void UpdateProjectiles(float dt)
    {
        for (int i = 0; i < projectile_pools.get_length(); i++)
        {
            projectile_pools[i].Update(dt);
        }
    }

    void UpdateMissions(float dt)
    {
        int count = 0;

        for (int i = 0; i < missions.get_length(); i++)
        {
            auto@ mission = missions[i];

            if (mission.IsCompleted())
            {
                if (cur_mission == i)
                {
                    NextMission();
                }
                continue;
            }

            mission.SetAsCurrent(cur_mission == i);
            mission.Update(dt);

            count++;
        }

        if (count == 0)
        {
            ShowObjective("Return to base");

            Vector3 res;
            core.render.TransformToScreen(main_helipad_pos, res, Vector2(35.0f), Vector2(45.0f));
            float scale = core.render.GetHeight() / 1024.0f;

            core.render.DebugText(Vector2(res.x * scale, res.y * scale), 0, "X");

            CheckIfCanLand(main_helipad_pos, dt);
        }
    }

    void ShowObjective(string&in text)
    {
        objective_label.SetText(text);
    }

    void UpdateHeliHud()
    {
        armour_count_label.SetText("" + armour_count);
        fuel_count_label.SetText("" + fuel_count);
        bullets_count_label.SetText("" + bullets_count);
        missiles_count_label.SetText("" + missiles_count);
    }

    void Update(float dt)
    {
        can_grab = true;

        if (armour_count > 0)
        {
            UpdateMissions(dt);

            UpdateHeli(dt);

            UpdateCamera(dt);

            UpdateEnemies(dt);
        }
        else
        {
            time_to_restart += dt;
            
            if (time_to_restart > 3.0f)
            {
                time_to_restart = 0.0f;
                Restart();
            }
        }

        UpdateHeliHud();

        UpdateProjectiles(dt);

        UpdateParticles(dt);

        timer += dt;
        core.render.DebugText(5, 3, "Timer: " + timer);
    }
}