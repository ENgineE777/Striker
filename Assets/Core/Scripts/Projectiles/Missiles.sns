class Missiles : ProjectilePool
{
    void OnInit()
    {
        main.RegisterProjectilePool(this);
    }

    void AddProjectile(Vector3&in pos, Vector3&in dir, string&in shoter_name, int shoter_index, int phys_group) override
    {
        ProjectilePool::AddProjectile(pos, dir, shoter_name, shoter_index, phys_group);

        auto@ missile = projectiles[projectiles.get_length() - 1];

        Matrix trail_mat;
        trail_mat.SetPos(pos);

        @missile.trail = @core.scene.CreateParticles("Core", "smokeTrail");
        missile.trail.SetTransform(trail_mat);
    }

    void Update(float dt) override
    {
        Matrix mat;
        Vector3 hit, normal;
        string object_name;
        int object_index;

        for (int i =  0; i < projectiles.get_length(); i++)
        {
            Projectile@ missile = @projectiles[i];

            if (missile.wait_delete)
            {
                if (!missile.trail.IsSysyemActive())
                {
                    missile.trail.Release();

                    projectiles.removeAt(i);
                    i--;
                }

                continue;
            }

            missile.time_life += dt;

            if (missile.time_life > 2.0f || core.scene.Raycast3D(missile.pos, missile.dir, dt * speed, missile.phys_group, hit, normal, object_name, object_index))
            {
                if (object_index != missile.shoter_index || object_name != missile.shoter_name)
                {
                    Vector3 dir = missile.dir;
                    dir.y = 0.0f;
                    dir.Normalize();

                    main.HitObject(hit - dir * 3.0f, damage, object_name, object_index);

                    core.scene.PlayParticles("Core", "hit2", hit);

                    if (core.scene.OverlapWithSphere(hit, 4.0f))
                    {
                        int count = core.scene.GetOverlapBodiesCount();

                        for (int j = 0; j < count; j++)
                        {
                            core.scene.GetOverlapBody(j, object_name, object_index);
                            main.HitObject(hit - dir * 3.0f, damage, object_name, object_index);
                        }
                    }

                    if (missile.trail != null)
                    {
                        missile.visible = 0;
                        missile.wait_delete = true;
                        missile.trail.SetEmitersActive(false);
                    }
                    else
                    {
                        projectiles.removeAt(i);
				        i--;
                    }

                    continue;
                }
            }

            missile.pos += missile.dir * dt * speed;

            mat = missile.mesh.GetTransform();
            mat.SetPos(missile.pos);
            missile.mesh.SetTransform(mat);

            if (missile.trail != null)
            {
                Matrix trail_mat;
                trail_mat.SetPos(missile.pos);
                missile.trail.SetTransform(trail_mat);
            }
        }
    }
}